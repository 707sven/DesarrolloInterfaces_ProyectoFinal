package com.smartocupation.smartocupation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author marta
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    // Creamos las listas que guardaran la informacion de las tablas para realizar el informe más adelante
    private List<Alquiler> alquileres = new ArrayList<>();
    private List<Vivienda> viviendas = new ArrayList<>();

    public VentanaPrincipal() {

        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("SmartOcupation | Marta Albarracin Martin");

        // Cargar todos los alquileres al iniciar el programa
        List<Alquiler> todosAlquileres = ConexionSQL.obtenerTodosLosAlquileres();
        cargarDatosTabla(todosAlquileres);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelConsulta = new javax.swing.JPanel();
        fechaInicio = new com.toedter.calendar.JDateChooser();
        fechaFinal = new com.toedter.calendar.JDateChooser();
        jLabel_rangoFechas = new javax.swing.JLabel();
        consulta = new javax.swing.JButton();
        jLabel_fechaInicio = new javax.swing.JLabel();
        jLabel_fechaFinal = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel_SmartOcupation = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel_alquileres = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlquiler = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaViviendas = new javax.swing.JTable();
        generarInforme = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(860, 600));
        setResizable(false);

        panelConsulta.setBackground(new java.awt.Color(242, 242, 242));
        panelConsulta.setPreferredSize(new java.awt.Dimension(850, 600));

        jLabel_rangoFechas.setFont(new java.awt.Font("Malgun Gothic Semilight", 1, 16)); // NOI18N
        jLabel_rangoFechas.setForeground(new java.awt.Color(0, 0, 0));
        jLabel_rangoFechas.setText("RANGO DE FECHAS:");

        consulta.setBackground(new java.awt.Color(0, 31, 63));
        consulta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        consulta.setForeground(new java.awt.Color(255, 255, 255));
        consulta.setText("Consultar");
        consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaActionPerformed(evt);
            }
        });

        jLabel_fechaInicio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel_fechaInicio.setText("Fecha inicio:");

        jLabel_fechaFinal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel_fechaFinal.setText("Fecha final:");

        jPanel1.setBackground(new java.awt.Color(0, 31, 63));

        jLabel_SmartOcupation.setBackground(new java.awt.Color(14, 63, 114));
        jLabel_SmartOcupation.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLabel_SmartOcupation.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_SmartOcupation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_SmartOcupation.setText("SmartOcupation");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel_SmartOcupation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_SmartOcupation)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(187, 197, 207));

        jLabel_alquileres.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel_alquileres.setText("TABLA ALQUILERES");

        tablaAlquiler.setBackground(new java.awt.Color(255, 255, 255));
        tablaAlquiler.setForeground(new java.awt.Color(0, 0, 0));
        tablaAlquiler.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Número Expediente", "Fecha Entrada", "Tiempo Estimado", "Nombre Cliente", "Datos Personales", "Datos Facturación", "ID Vivienda"
            }
        ));
        tablaAlquiler.setFocusable(false);
        jScrollPane1.setViewportView(tablaAlquiler);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel1.setText("TABLA VIVIENDAS");

        tablaViviendas.setBackground(new java.awt.Color(255, 255, 255));
        tablaViviendas.setForeground(new java.awt.Color(0, 0, 0));
        tablaViviendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Vivienda", "Ubicacion", "Metros Cuadrados", "Num Habitaciones", "Num Baños", "Cod Referencia", "Alquiler Mensual"
            }
        ));
        jScrollPane2.setViewportView(tablaViviendas);

        generarInforme.setBackground(new java.awt.Color(0, 31, 63));
        generarInforme.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        generarInforme.setForeground(new java.awt.Color(255, 255, 255));
        generarInforme.setText("Generar informe");
        generarInforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarInformeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_alquileres, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(generarInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_alquileres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generarInforme)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelConsultaLayout = new javax.swing.GroupLayout(panelConsulta);
        panelConsulta.setLayout(panelConsultaLayout);
        panelConsultaLayout.setHorizontalGroup(
            panelConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConsultaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_rangoFechas, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_fechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel_fechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
        );
        panelConsultaLayout.setVerticalGroup(
            panelConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelConsultaLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(consulta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(fechaInicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fechaFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_fechaFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_rangoFechas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_fechaInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelConsulta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarInformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarInformeActionPerformed
        // Ruta donde deseas guardar el informe
        String rutaInforme = "informe_historico.txt";

        // Genera y guarda el informe en un archivo de texto
        generarInforme(rutaInforme);

    }//GEN-LAST:event_generarInformeActionPerformed

    private void consultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaActionPerformed
        // Obtener las fechas seleccionadas y convertirlas a java.sql.Date para poder realizar la consulta
        java.sql.Date fechaInicioSeleccionada = new java.sql.Date(fechaInicio.getDate().getTime());
        java.sql.Date fechaFinalSeleccionada = new java.sql.Date(fechaFinal.getDate().getTime());

        // Llamar a la lógica de consulta
        realizarConsulta(fechaInicioSeleccionada, fechaFinalSeleccionada);
    }//GEN-LAST:event_consultaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton consulta;
    private com.toedter.calendar.JDateChooser fechaFinal;
    private com.toedter.calendar.JDateChooser fechaInicio;
    private javax.swing.JButton generarInforme;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_SmartOcupation;
    private javax.swing.JLabel jLabel_alquileres;
    private javax.swing.JLabel jLabel_fechaFinal;
    private javax.swing.JLabel jLabel_fechaInicio;
    private javax.swing.JLabel jLabel_rangoFechas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel panelConsulta;
    private javax.swing.JTable tablaAlquiler;
    private javax.swing.JTable tablaViviendas;
    // End of variables declaration//GEN-END:variables

    private void realizarConsulta(java.sql.Date fechaInicio, java.sql.Date fechaFinal) {
        List<Alquiler> resultadosConsulta = ConexionSQL.consultarAlquileresPorFechas(fechaInicio, fechaFinal);
        cargarDatosTabla(resultadosConsulta);
    }

    private void cargarDatosTabla(List<Alquiler> alquileres) {
        DefaultTableModel modeloA = (DefaultTableModel) tablaAlquiler.getModel();
        DefaultTableModel modeloV = (DefaultTableModel) tablaViviendas.getModel();

        // Limpiar la tabla antes de agregar nuevos datos
        modeloA.setRowCount(0);
        modeloV.setRowCount(0);

        // Limpiar las listas antes de agregar nuevos datos
        this.alquileres.clear();
        this.viviendas.clear();

        // Agregamos los datos de alquiler
        for (Alquiler alquiler : alquileres) {
            Object[] fila = {
                alquiler.getNumeroExpediente(),
                alquiler.getFechaEntrada(),
                alquiler.getTiempoEstimadoAlquiler(),
                alquiler.getNombreCliente(),
                alquiler.getDatosPersonalesCliente(),
                alquiler.getDatosFacturacionCliente(),
                alquiler.getVivienda().getIdVivienda()
            };
            modeloA.addRow(fila);

            // Agregamos los datos de la vivienda asociada a este alquiler
            Vivienda vivienda = obtenerViviendaPorId(alquiler.getVivienda().getIdVivienda());

            if (vivienda != null) {
                Object[] filaVivienda = {
                    vivienda.getIdVivienda(),
                    vivienda.getUbicacion(),
                    vivienda.getMetrosCuadrados(),
                    vivienda.getNumHabitaciones(),
                    vivienda.getNumBanos(),
                    vivienda.getCodigoReferencia(),
                    vivienda.getPrecioAlquilerMensual()
                };
                modeloV.addRow(filaVivienda);

                // Agregamos a las listas
                this.alquileres.add(alquiler);
                this.viviendas.add(vivienda);
            }

        }

    }

    // Método para obtener una vivienda por su Id
    private Vivienda obtenerViviendaPorId(String idVivienda) {
        Vivienda vivienda = null;

        try ( Connection conexion = ConexionSQL.obtenerConexion()) {
            String consultaSQL = "SELECT * FROM Viviendas WHERE IdVivienda = ?";
            try ( PreparedStatement preparedStatement = conexion.prepareStatement(consultaSQL)) {
                preparedStatement.setString(1, idVivienda);
                try ( ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        vivienda = new Vivienda(
                                resultSet.getString("IdVivienda"),
                                resultSet.getString("Ubicacion"),
                                resultSet.getDouble("MetrosCuadrados"),
                                resultSet.getInt("NumHabitaciones"),
                                resultSet.getInt("NumBanos"),
                                resultSet.getString("CodigoReferencia"),
                                resultSet.getDouble("PrecioAlquilerMensual")
                        );
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return vivienda;
    }

    // Método para generar un informe del histórico de los alquileres
    public void generarInforme(String rutaArchivo) {
        try ( BufferedWriter writer = new BufferedWriter(new FileWriter(rutaArchivo))) {
            // Escribir encabezado del informe de la tabla Alquiler
            writer.write("[TABLA ALQUILERES]\nNúmero Expediente | Fecha Entrada | Tiempo Estimado | Nombre Cliente | Datos Personales Cliente | Datos Facturación Cliente | ID Vivienda\n");

            // Escribir cada alquiler en una nueva línea
            for (int i = 0; i < alquileres.size(); i++) {
                Alquiler alquiler = alquileres.get(i);
                Vivienda vivienda = viviendas.get(i);

                writer.write(alquiler.getNumeroExpediente() + " | "
                        + alquiler.getFechaEntrada() + " | "
                        + alquiler.getTiempoEstimadoAlquiler() + " | "
                        + alquiler.getNombreCliente() + " | "
                        + alquiler.getDatosPersonalesCliente() + " | "
                        + alquiler.getDatosFacturacionCliente() + " | "
                        + vivienda.getIdVivienda() + "\n");
            }

            // Escribir encabezado del informe de la tabla Viviendas
            writer.write("\n[TABLA VIVIENDAS]\nID Vivienda | Ubicacion | Metros Cuadrados | Num Habitaciones | Num Baños | Cod Referencia | Alquiler Mensual\n");

            // Escribir cada alquiler en una nueva línea
            for (int i = 0; i < viviendas.size(); i++) {
                Alquiler alquiler = alquileres.get(i);
                Vivienda vivienda = viviendas.get(i);

                writer.write(vivienda.getIdVivienda() + " | "
                        + vivienda.getUbicacion() + " | "
                        + vivienda.getMetrosCuadrados() + " | "
                        + vivienda.getNumHabitaciones() + " | "
                        + vivienda.getNumBanos() + " | "
                        + vivienda.getCodigoReferencia() + " | "
                        + vivienda.getPrecioAlquilerMensual() + "\n");
            }

            // Mostramos un JDialog para mostrar la confirmación del guardado del histórico
            JOptionPane.showMessageDialog(this, ("Informe generado correctamente en: " + rutaArchivo));
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
